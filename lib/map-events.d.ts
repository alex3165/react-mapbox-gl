/// <reference types="mapbox-gl" />
/// <reference types="react" />
import * as MapboxGl from 'mapbox-gl';
export declare type MapEvent = (map: MapboxGl.Map, evt: React.SyntheticEvent<any>) => void;
export interface Events {
    onStyleLoad?: MapEvent;
    onResize?: MapEvent;
    onDblClick?: MapEvent;
    onClick?: MapEvent;
    onMouseMove?: MapEvent;
    onMouseOut?: MapEvent;
    onMoveStart?: MapEvent;
    onMove?: MapEvent;
    onMoveEnd?: MapEvent;
    onMouseDown?: MapEvent;
    onMouseUp?: MapEvent;
    onDragStart?: MapEvent;
    onDragEnd?: MapEvent;
    onDrag?: MapEvent;
    onZoomStart?: MapEvent;
    onZoom?: MapEvent;
    onZoomEnd?: MapEvent;
    onPitch?: MapEvent;
    onPitchStart?: MapEvent;
    onPitchEnd?: MapEvent;
    onWebGlContextLost?: MapEvent;
    onWebGlContextRestored?: MapEvent;
    onRemove?: MapEvent;
    onContextMenu?: MapEvent;
    onRender?: MapEvent;
    onError?: MapEvent;
    onSourceData?: MapEvent;
    onDataLoading?: MapEvent;
    onStyleDataLoading?: MapEvent;
    onTouchCancel?: MapEvent;
    onData?: MapEvent;
    onSourceDataLoading?: MapEvent;
    onTouchMove?: MapEvent;
    onTouchEnd?: MapEvent;
    onTouchStart?: MapEvent;
    onStyleData?: MapEvent;
    onBoxZoomStart?: MapEvent;
    onBoxZoomEnd?: MapEvent;
    onBoxZoomCancel?: MapEvent;
    onRotateStart?: MapEvent;
    onRotate?: MapEvent;
    onRotateEnd?: MapEvent;
}
export declare type EventMapping = {
    [T in keyof Events]: string;
};
export declare const events: EventMapping;
export declare type Listeners = {
    [T in keyof Events]: (evt: React.SyntheticEvent<any>) => void;
};
export declare const listenEvents: (partialEvents: EventMapping, props: Partial<Events>, map: MapboxGl.Map) => Listeners;
export declare const updateEvents: (listeners: Listeners, nextProps: Partial<Events>, map: MapboxGl.Map) => {
    onStyleLoad?: (evt: React.SyntheticEvent<any>) => void;
    onResize?: (evt: React.SyntheticEvent<any>) => void;
    onDblClick?: (evt: React.SyntheticEvent<any>) => void;
    onClick?: (evt: React.SyntheticEvent<any>) => void;
    onMouseMove?: (evt: React.SyntheticEvent<any>) => void;
    onMouseOut?: (evt: React.SyntheticEvent<any>) => void;
    onMoveStart?: (evt: React.SyntheticEvent<any>) => void;
    onMove?: (evt: React.SyntheticEvent<any>) => void;
    onMoveEnd?: (evt: React.SyntheticEvent<any>) => void;
    onMouseDown?: (evt: React.SyntheticEvent<any>) => void;
    onMouseUp?: (evt: React.SyntheticEvent<any>) => void;
    onDragStart?: (evt: React.SyntheticEvent<any>) => void;
    onDragEnd?: (evt: React.SyntheticEvent<any>) => void;
    onDrag?: (evt: React.SyntheticEvent<any>) => void;
    onZoomStart?: (evt: React.SyntheticEvent<any>) => void;
    onZoom?: (evt: React.SyntheticEvent<any>) => void;
    onZoomEnd?: (evt: React.SyntheticEvent<any>) => void;
    onPitch?: (evt: React.SyntheticEvent<any>) => void;
    onPitchStart?: (evt: React.SyntheticEvent<any>) => void;
    onPitchEnd?: (evt: React.SyntheticEvent<any>) => void;
    onWebGlContextLost?: (evt: React.SyntheticEvent<any>) => void;
    onWebGlContextRestored?: (evt: React.SyntheticEvent<any>) => void;
    onRemove?: (evt: React.SyntheticEvent<any>) => void;
    onContextMenu?: (evt: React.SyntheticEvent<any>) => void;
    onRender?: (evt: React.SyntheticEvent<any>) => void;
    onError?: (evt: React.SyntheticEvent<any>) => void;
    onSourceData?: (evt: React.SyntheticEvent<any>) => void;
    onDataLoading?: (evt: React.SyntheticEvent<any>) => void;
    onStyleDataLoading?: (evt: React.SyntheticEvent<any>) => void;
    onTouchCancel?: (evt: React.SyntheticEvent<any>) => void;
    onData?: (evt: React.SyntheticEvent<any>) => void;
    onSourceDataLoading?: (evt: React.SyntheticEvent<any>) => void;
    onTouchMove?: (evt: React.SyntheticEvent<any>) => void;
    onTouchEnd?: (evt: React.SyntheticEvent<any>) => void;
    onTouchStart?: (evt: React.SyntheticEvent<any>) => void;
    onStyleData?: (evt: React.SyntheticEvent<any>) => void;
    onBoxZoomStart?: (evt: React.SyntheticEvent<any>) => void;
    onBoxZoomEnd?: (evt: React.SyntheticEvent<any>) => void;
    onBoxZoomCancel?: (evt: React.SyntheticEvent<any>) => void;
    onRotateStart?: (evt: React.SyntheticEvent<any>) => void;
    onRotate?: (evt: React.SyntheticEvent<any>) => void;
    onRotateEnd?: (evt: React.SyntheticEvent<any>) => void;
};
